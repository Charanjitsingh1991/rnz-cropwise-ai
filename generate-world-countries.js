// generate-world-countries.js
// Run: node generate-world-countries.js

const fs = require('fs');
const https = require('https');

function getJSON(url) {
  return new Promise((resolve, reject) => {
    https
      .get(url, (res) => {
        let data = "";
        res.on("data", (chunk) => (data += chunk));
        res.on("end", () => {
          try {
            resolve(JSON.parse(data));
          } catch (e) {
            reject(e);
          }
        });
      })
      .on("error", reject);
  });
}

function pickCurrencyCode(currencies) {
  if (!currencies) return "";
  const codes = Object.keys(currencies);
  return codes[0] || "";
}

function toCountry(rc) {
  const code = (rc.cca2 || "").toUpperCase();
  const name = rc.name?.common || "";
  if (!code || !name) return null;

  const [lat, lng] = rc.latlng || [0, 0];

  const regions = [
    ...(rc.region ? [rc.region] : []),
    ...(rc.subregion ? [rc.subregion] : []),
  ];

  return {
    code,
    name,
    states: [], // enrich later with states/provinces
    regions,
    coordinates: { latitude: lat, longitude: lng },
    currency: pickCurrencyCode(rc.currencies),
    timezone: rc.timezones || [],
  };
}

async function main() {
  console.log('🌍 Fetching world countries data...');
  
  const url = "https://restcountries.com/v3.1/all?fields=cca2,name,latlng,timezones,currencies,region,subregion";

  try {
    const data = await getJSON(url);
    console.log(`📊 Found ${data.length} countries from REST Countries API`);

    const mapped = data
      .map(toCountry)
      .filter(c => Boolean(c))
      .sort((a, b) => a.name.localeCompare(b.name));

    console.log(`✅ Processed ${mapped.length} valid countries`);

    const header = `// Generated by generate-world-countries.js
// Complete world countries database with 195+ countries
// Compatible with RNZ AI Crop Advisor location system

export interface Country {
  code: string;
  name: string;
  states?: State[];
  regions: string[];
  coordinates: {
    latitude: number;
    longitude: number;
  };
  currency: string;
  timezone: string[];
}

export interface State {
  code: string;
  name: string;
  districts?: string[];
  coordinates: {
    latitude: number;
    longitude: number;
  };
}

export const worldCountries: Country[] = `;

    const body = JSON.stringify(mapped, null, 2);
    const footer = `;

export const getCountryByCode = (code: string): Country | undefined =>
  worldCountries.find(c => c.code === code);

export const getStatesByCountryCode = (countryCode: string): State[] =>
  getCountryByCode(countryCode)?.states || [];

export const searchCountries = (searchTerm: string): Country[] =>
  worldCountries.filter(c =>
    c.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
    c.code.toLowerCase().includes(searchTerm.toLowerCase())
  );`;

    fs.writeFileSync("src/lib/datasets/world-countries-complete.ts", header + body + footer, "utf-8");
    console.log("🎉 Generated src/lib/datasets/world-countries-complete.ts with", mapped.length, "countries!");
    
    // Also create a summary
    const summary = {
      totalCountries: mapped.length,
      generatedAt: new Date().toISOString(),
      sampleCountries: mapped.slice(0, 10).map(c => ({ code: c.code, name: c.name })),
      currencies: [...new Set(mapped.map(c => c.currency).filter(Boolean))].slice(0, 20),
      regions: [...new Set(mapped.flatMap(c => c.regions))].sort()
    };
    
    fs.writeFileSync("countries-summary.json", JSON.stringify(summary, null, 2), "utf-8");
    console.log("📋 Created countries-summary.json for reference");
    
  } catch (error) {
    console.error("❌ Generation failed:", error.message);
    process.exit(1);
  }
}

main();
